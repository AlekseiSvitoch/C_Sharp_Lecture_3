// ==== Функции программирования

// Тип №1. Ничего не принимают, ничего не возвращают (void):
void Method1() // никаких данных мы не вводим
{
		Console.WriteLine("Автор ..."); 
}
// Method1(); // это вызов такого метода





// Тип №2. Что-то принимают, ничего возвращают (void):
void Method2(string msg) // метод ничего не возвращает, но принимает данные
{
		Console.WriteLine(msg);
}
// Method2("Текст сообщения"); // это вызов такого метода





void Method21(string msg, int count)
{
    int i = 0;
    while (i < count)
    {
        Console.WriteLine(msg);
        i++;
    }
}
// Method21("Текст", 4);
// Method21(count: 4, msg: "Новый текст"); // можно именнованные аргументы, что даст
                                            // возможность писать их непоследовательно





// Тип №3. Ничего не принимают, что-то возвращают (например, генерируют случайные данные):
int Method3() // входных данных нет
{
    return DateTime.Now.Year; // возвращает текущую дату
}
int year = Method3(); // кладем полученное значение метода в переменную
// Console.WriteLine(year); // выводим значение переменной






// Тип №4. Что-то принимают, что-то возвращают
// string Method4(int count, string text)
// {
//     int i = 0;
//     string result = string.Empty; // записываем корректно присвоенное пустое значение строки
    
//     while (i < count)
//     {
//         result = result + text; // в переменную кладем ее значение + текст
//         i++;
//     }
//     return result; // получаем значение после всех действий
// }
// string res = Method4(10, "asdf"); // присваиваем значением метода переменной, введя данные
// Console.WriteLine(res);






// Цикл for:
string Method4(int count, string text)
{
    string result = string.Empty; // записываем корректно присвоенное пустое значение строк 
    for (int i = 0; i < count; i++)
    {
        result = result + text; // в переменную кладем ее значение + текст
    }
    return result; // получаем значение после всех действий
}
string res = Method4(10, "asdf"); // присваиваем значением метода переменной, введя данные
// Console.WriteLine(res);





// Цикл в цикле. Таблица умножения:
// for (int i = 1; i < 10; i++)
// {
//     for (int j = 1; j < 10; j++)
//     {
//         Console.WriteLine($"{i} x {j} = {i * j}");
//     }
//     Console.WriteLine();
// }







// ==== Работа с текстом
// Дан текст. В тексте все пробелы заменить черточками,
// маленькие буквы "к" заменить большими "К",
// а большие "С" заменить на меленькие "с".

string text = "– Я думаю, сказал князь, улыбаясь, – что, "
            + "ежели бы вас послали вместо нашего милого Винценгероде,"
            + "вы бы взяли прступом согласие прусского короля."
            + "Вы так красноречивы. Вы дадите мне чаю?";

// string s = "qwerty"
//             012345
// s[3] // r

string Replace(string text, char oldValue, char newValue)
{
    string result = string.Empty;

    int length = text.Length;
    for (int i = 0; i < length; i++)
    {
        if (text[i] == oldValue) result = result + $"{newValue}";
        else result = result + $"{text[i]}";
    }

    return result;
}
string newText = Replace(text, ' ', '|'); // для работы метода с текстом нужно использовать
                                          // одинарные кавычки ''
// Console.WriteLine(newText);
// Console.WriteLine(); // для наглядности добавим пустую строчку

// newText = Replace(newText, 'к', 'К');
// Console.WriteLine(newText);
// Console.WriteLine();

// newText = Replace(newText, 'с', 'С'); // больших "С" в тексте нет, заменим маленькие на большие
// Console.WriteLine(newText);
// Console.WriteLine();







// ==== Упорядочивание данных в массиве
// Дан массив чисел {1, 5, 4, 3, 2, 6, 7, 1, 1}
// 1. Выбрать самый первый элемент
// 2. В оставшейся части определить минимальный элемент
// 3. Поменять первый найденный элемент с минимальным
// 4. Дальше находим следующий элемент, который теперь для нас является первым после отсортированного
// 5. Снова находим минимальный в оставшемся массиве чисел и снова меняем местами
// 6. Продолжать до момента, пока массив не будет полностью отсортирован

int[] arr = {1, 5, 4, 3, 2, 6, 7, 1, 1};

void PrintArray(int[] array) // метод для выведения данного массива на экран
{
    int count = array.Length; // задаем длину массива
    for (int i = 0; i < count; i++) // пробегаем по всем элементам массива
    {
        Console.Write($"{array[i]} "); // показываем на экране в строку, оставляя пробел
    }
    Console.WriteLine();
}

void SelectionSort(int[] array) // метод, который упорядочивает массив
{
    for (int i = 0; i < array.Length - 1; i++) // задаем цикл со встроенной длиной массива, 
    // пропускаем шаг, где мы писали int count = array.Length;
    // "array.Length - 1" отнимаем единицу потому что дальше при поиске максимального элемента 
    // подсчет будет начинаться с "int j = i + 1" и, отнимая единицу, мы компенсируем тем самым 
    // прибавляемую далее единицу и не нарушаем дину строки
    {
        int minPosition = i; // задаем изначальное значение минимальной позиции в массиве

        for (int j = i + 1; j < array.Length ; j++) // этот цикл ищет максимальный элемент
        {
            if (array[j] < array[minPosition]) minPosition = j;
        }
        int temporary = array[i]; // замена минимальной позиции той позицей, которую мы нашли
        array[i] = array[minPosition]; // обмен двумя переменными 
        array[minPosition] = temporary; // в минимальный элемент массива кледем элемент, который был временным
    }
}

PrintArray(arr); // запускаем метод вывода первоначального массива в терминал
SelectionSort(arr); // запускаем метод сортировки массива

PrintArray(arr); // запускаем метод вывода отсортированного массива в терминал